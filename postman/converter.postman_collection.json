{
	"info": {
		"_postman_id": "0acfe2e8-9b21-4f9f-a913-3096a8741f12",
		"name": "converter",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24162816"
	},
	"item": [
		{
			"name": "Register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - access_token, token_type, and expires_in\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.access_token).to.exist;\r",
							"    pm.expect(responseData.token_type).to.exist;\r",
							"    pm.expect(responseData.expires_in).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Access token is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.access_token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Access token should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Token type is a valid type\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.token_type).to.exist.and.to.be.a('string');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/auth/register?name=Alex&surname=Redfild&email=alex-redfild1@example.com&password=Test1:)",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"register"
					],
					"query": [
						{
							"key": "name",
							"value": "Alex"
						},
						{
							"key": "surname",
							"value": "Redfild"
						},
						{
							"key": "email",
							"value": "alex-redfild1@example.com"
						},
						{
							"key": "password",
							"value": "Test1:)"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, name, surname, and email\", function () {\r",
							"    const responseData = pm.response.json().data;\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.expect(responseData).to.have.property('name');\r",
							"    pm.expect(responseData).to.have.property('surname');\r",
							"    pm.expect(responseData).to.have.property('email');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id should be a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.data.id).to.be.a('number').and.to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Email is in a valid format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.data.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearer}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/auth/user",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(600);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('access_token');\r",
							"    pm.expect(responseData).to.have.property('token_type');\r",
							"    pm.expect(responseData).to.have.property('expires_in');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Access token is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"\r",
							"  pm.expect(responseData.access_token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Access token should not be empty\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/auth/login?email=alex-redfild1@example.com&password=Test1:)",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"login"
					],
					"query": [
						{
							"key": "email",
							"value": "alex-redfild1@example.com"
						},
						{
							"key": "password",
							"value": "Test1:)"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Refresh",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.access_token).to.exist;\r",
							"    pm.expect(responseData.token_type).to.exist;\r",
							"    pm.expect(responseData.expires_in).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Access token is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.access_token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Access token should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Token type is a valid type\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.token_type).to.be.a('string').and.to.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Expires in is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.expires_in).to.be.a('number').and.to.be.at.least(0, \"Expires in should be a non-negative integer\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearer}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/auth/refresh",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"refresh"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 300ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required field 'msg'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.msg).to.exist.and.to.be.a('string');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Msg field is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"\r",
							"  pm.expect(responseData.msg).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Msg field should be a non-empty string\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearer}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/auth/logout",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "Currencies",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json().data;\r",
							"\r",
							"    responseData.forEach(function(currency) {\r",
							"        pm.expect(currency).to.have.property('id');\r",
							"        pm.expect(currency).to.have.property('numCode');\r",
							"        pm.expect(currency).to.have.property('charCode');\r",
							"        pm.expect(currency).to.have.property('nominal');\r",
							"        pm.expect(currency).to.have.property('name');\r",
							"        pm.expect(currency).to.have.property('value');\r",
							"        pm.expect(currency).to.have.property('vunitRate');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Data field should be an array\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.data).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Each data item should have id as a string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    responseData.data.forEach(function(item) {\r",
							"        pm.expect(item.id).to.be.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Each data item should have numCode as a string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    responseData.data.forEach(function(item) {\r",
							"        pm.expect(item.numCode).to.be.a('string');\r",
							"    });\r",
							"});\r",
							" \r",
							"pm.test(\"Each data item should have charCode as a string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    responseData.data.forEach(function(item) {\r",
							"        pm.expect(item.charCode).to.be.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Each data item should have nominal as a string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    responseData.data.forEach(function(item) {\r",
							"        pm.expect(item.nominal).to.be.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Each data item should have name as a string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    responseData.data.forEach(function(item) {\r",
							"        pm.expect(item.name).to.be.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Each data item should have value as a string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    responseData.data.forEach(function(item) {\r",
							"        pm.expect(item.value).to.be.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Each data item should have vunitRate as a string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    responseData.data.forEach(function(item) {\r",
							"        pm.expect(item.vunitRate).to.be.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearer}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/currencies",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"currencies"
					]
				}
			},
			"response": []
		},
		{
			"name": "Currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required Content-Type header of application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response includes a message field\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.have.property('message');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearer}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/currencies/R01115",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"currencies",
						"R01115"
					]
				}
			},
			"response": []
		},
		{
			"name": "Convert",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.amount).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Amount is a non-negative number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.amount).to.be.a('number');\r",
							"    pm.expect(responseData.amount).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearer}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/convert/?to=R01035&from=R01235&amount=100",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"convert",
						""
					],
					"query": [
						{
							"key": "to",
							"value": "R01035"
						},
						{
							"key": "from",
							"value": "R01235"
						},
						{
							"key": "amount",
							"value": "100"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080/api/v1",
			"type": "string"
		},
		{
			"key": "bearer",
			"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODAvYXBpL3YxL2F1dGgvbG9naW4iLCJpYXQiOjE3MjE3NTMyMDMsImV4cCI6MTcyMTc1NjgwMywibmJmIjoxNzIxNzUzMjAzLCJqdGkiOiJ0WDc5QW5TcFQ1RUhrNDV6Iiwic3ViIjoiMSIsInBydiI6ImM4YmYxNWU1ODI4ZTZmMGZiMmU4MjYzNTE5Y2VkODhjZjhlZjI0MGYifQ.L-ar98epPHF3uCvqNJgjWXIkxbMTvL1ROLYRzWUaqZo",
			"type": "string"
		}
	]
}